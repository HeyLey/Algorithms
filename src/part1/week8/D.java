package part1.week8;

/*
–î–∞–Ω –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –¥–µ—Ä–µ–≤–æ–º.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ ùëõ –∏ ùëö ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
–≤–µ—Ä—à–∏–Ω –∏ —Ä—ë–±–µ—Ä –≤ –≥—Ä–∞—Ñ–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ (1 6 ùëõ 6 100). –í —Å–ª–µ–¥—É—é—â–∏—Ö ùëö —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–¥–∞–Ω—ã —Ä—ë–±—Ä–∞;
ùëñ-—è –∏–∑ —ç—Ç–∏—Ö —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ ùë¢ùëñ –∏ ùë£ùëñ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ‚Äî –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ü–æ–≤ ùëñ-–≥–æ —Ä–µ–±—Ä–∞
(1 6 ùë¢ùëñ
, ùë£ùëñ 6 ùëõ). –ì—Ä–∞—Ñ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ç–µ–ª—å –∏ –∫—Ä–∞—Ç–Ω—ã—Ö —Ä—ë–±–µ—Ä.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤—ã–≤–µ–¥–∏—Ç–µ ‚ÄúYES‚Äù, –µ—Å–ª–∏ –≥—Ä–∞—Ñ —è–≤–ª—è–µ—Ç—Å—è –¥–µ—Ä–µ–≤–æ–º, –∏ ‚ÄúNO‚Äù –≤
–ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
 */

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

public class D {

    public static void main(String[] args) throws IOException {
        MyRd in = new MyRd(System.in);
        PrintWriter out = new PrintWriter(System.out);

        int n = in.nextInt();
        int m = in.nextInt();

        List<List<Integer>> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            list.add(new ArrayList<>());
        }

        for (int k = 0; k < m; k++) {
            int i = in.nextInt() - 1;
            int j = in.nextInt() - 1;
            list.get(i).add(j);
            list.get(j).add(i);
        }

        boolean visited[] = new boolean[n];

        dfs(list, visited, 0);

        boolean connectivity = true;

        for (boolean b : visited) {
            if (!b) {
                connectivity = false;
            }
        }

        if (connectivity == true && ((n - m) == 1)) {
            out.println("YES");
        } else {
            out.println("NO");
        }

        out.close();
    }

    public static void dfs(List<List<Integer>> list, boolean[] visited, int v) {
        if (visited[v]) {
            return;
        }
        visited[v] = true;

        for (int i : list.get(v)) {
            dfs(list, visited, i);
        }
    }
}


class MyRd{
    BufferedInputStream in;

    final int bufSize = 1 << 16;
    final byte b[] = new byte[bufSize];

    MyRd(InputStream in) {
        this.in = new BufferedInputStream(in, bufSize);
    }

    int nextInt() throws IOException {
        int c;
        while ((c = nextChar()) <= 32)
            ;
        int x = 0, sign = 1;
        if (c == '-') {
            sign = -1;
            c = nextChar();
        }
        while (c >= '0') {
            x = x * 10 + (c - '0');
            c = nextChar();
        }
        return x * sign;
    }

    StringBuilder _buf = new StringBuilder();

    String nextWord() throws IOException {
        int c;
        _buf.setLength(0);
        while ((c = nextChar()) <= 32 && c != -1)
            ;
        if (c == -1)
            return null;
        while (c > 32) {
            _buf.append((char) c);
            c = nextChar();
        }
        return _buf.toString();
    }

    int bn = bufSize, k = bufSize;

    int nextChar() throws IOException {
        if (bn == k) {
            k = in.read(b, 0, bufSize);
            bn = 0;
        }
        return bn >= k ? -1 : b[bn++];
    }

    int nextNotSpace() throws IOException {
        int ch;
        while ((ch = nextChar()) <= 32 && ch != -1)
            ;
        return ch;
    }
}

